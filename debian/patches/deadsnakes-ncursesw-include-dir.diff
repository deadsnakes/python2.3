# Add /usr/include/ncursesw for the _curses and _cursespanel modules. Prior to
# precise, libreadline-dev would pull in libncurses5-dev which provides
# /usr/include/curses.h; but that's kinda wrong and doesn't work in precise
# anymore (at least on amd64), so we just use the correct include path right
# away. See also:
# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=650600

--- a/setup.py
+++ b/setup.py
@@ -798,13 +798,19 @@
                 exts.append( Extension('nis', ['nismodule.c'],
                                        libraries = libs) )
 
-        # Curses support, requring the System V version of curses, often
+        # Curses support, requiring the System V version of curses, often
         # provided by the ncurses library.
-        if platform == 'sunos4':
-            inc_dirs += ['/usr/5include']
-            lib_dirs += ['/usr/5lib']
-
-        if (self.compiler.find_library_file(lib_dirs, 'ncurses')):
+        panel_library = 'panel'
+        ncursesw_incdirs = ["/usr/include/ncursesw"]
+        if (self.compiler.find_library_file(lib_dirs, 'ncursesw')):
+            curses_libs = ['ncursesw']
+            # Bug 1464056: If _curses.so links with ncursesw,
+            # _curses_panel.so must link with panelw.
+            panel_library = 'panelw'
+            exts.append( Extension('_curses', ['_cursesmodule.c'],
+                                   libraries = curses_libs,
+                                   include_dirs = ncursesw_incdirs) )
+        elif (self.compiler.find_library_file(lib_dirs, 'ncurses')):
             curses_libs = ['ncurses']
             exts.append( Extension('_curses', ['_cursesmodule.c'],
                                    libraries = curses_libs) )
@@ -824,9 +830,10 @@
 
         # If the curses module is enabled, check for the panel module
         if (module_enabled(exts, '_curses') and
-            self.compiler.find_library_file(lib_dirs, 'panel')):
+            self.compiler.find_library_file(lib_dirs, panel_library)):
             exts.append( Extension('_curses_panel', ['_curses_panel.c'],
-                                   libraries = ['panel'] + curses_libs) )
+                                   libraries = [panel_library] + curses_libs,
+                                   include_dirs = ncursesw_incdirs) )
 
         # Build `fpectl` module if Python is configured with --with-fpectl
         data = open('pyconfig.h').read()
--- a/configure.in
+++ b/configure.in
@@ -952,7 +952,7 @@
 
 # checks for header files
 AC_HEADER_STDC
-AC_CHECK_HEADERS(curses.h dlfcn.h fcntl.h grp.h limits.h langinfo.h \
+AC_CHECK_HEADERS(dlfcn.h fcntl.h grp.h limits.h langinfo.h \
 libintl.h locale.h ncurses.h poll.h pthread.h \
 signal.h stdarg.h stddef.h stdlib.h stropts.h termios.h thread.h \
 unistd.h utime.h \
@@ -963,13 +963,6 @@
 AC_HEADER_DIRENT
 AC_HEADER_MAJOR
 
-# On Solaris, term.h requires curses.h
-AC_CHECK_HEADER(term.h,,,[
-#ifdef HAVE_CURSES_H
-#include <curses.h>
-#endif
-])
-
 # checks for typedefs
 was_it_defined=no
 AC_MSG_CHECKING(for clock_t in time.h)
@@ -3013,6 +3006,17 @@
   [Define if you have struct stat.st_mtim.tv_nsec])
 fi
 
+ac_save_cppflags="$CPPFLAGS"
+CPPFLAGS="$CPPFLAGS -I/usr/include/ncursesw"
+AC_CHECK_HEADERS(curses.h ncurses.h)
+
+# On Solaris, term.h requires curses.h
+AC_CHECK_HEADERS(term.h,,,[
+#ifdef HAVE_CURSES_H
+#include <curses.h>
+#endif
+])
+
 # On HP/UX 11.0, mvwdelch is a block with a return statement
 AC_MSG_CHECKING(whether mvwdelch is an expression)
 AC_CACHE_VAL(ac_cv_mvwdelch_is_expression,
